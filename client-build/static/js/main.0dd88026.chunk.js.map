{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","props","className","AddNew","onSubmit","term","handleChange","List","referralLinks","handleLinkClick","editListItem","deleteLink","editName","handleChangeLink","nameTerm","handleChangeClick","clickTerm","value","onChange","placeholder","TableLinks","map","link","key","id","name","type","to","onClick","clickNum","Landing","currentName","resetCurrentName","src","alt","LandingLinks","href","App","state","sortByClicks","bind","fetch","then","response","json","data","list","forEach","d","push","_id","console","log","setState","sort","a","b","splitUrl","decodeURI","window","location","split","currName","length","this","event","preventDefault","isUnique","linkName","method","body","JSON","stringify","headers","catch","error","target","newBody","nameUri","encodeURI","newClickNum","newName","Number","edit","exact","path","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0dd88026.chunk.js","sourcesContent":["//jshint esversion:6\n\nimport React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      referralLinks: [],\n      currentName: \"\",\n      term: \"\",\n      editName: \"\",   //current name being edited\n      nameTerm: \"\",   //value in edit name input\n      clickTerm: \"\",  //value in edit clickNum input\n    };\n    this.sortByClicks = this.sortByClicks.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.handleLinkClick = this.handleLinkClick.bind(this);\n    this.editListItem = this.editListItem.bind(this);\n    this.deleteLink = this.deleteLink.bind(this);\n    this.handleChangeLink = this.handleChangeLink.bind(this);\n    this.handleChangeClick = this.handleChangeClick.bind(this);\n    this.resetCurrentName = this.resetCurrentName.bind(this);\n  }\n\n  componentDidMount() {\n    //populate referralLinks from db on mount\n    fetch(\"https://ambserver.herokuapp.com/reflinks\")\n      .then(response => response.json())\n      .then(data => {\n        const list = [];\n        data.forEach((d) => {\n          list.push({name: d.name, clickNum: d.clickNum, id: d._id});\n        });\n        console.log(list);\n        this.setState({\n          referralLinks: this.sortByClicks(list)\n        });\n    });\n  }\n\n  sortByClicks(referralLinks) {\n    //helper method - sorts referralLinks by clickNum property\n    return referralLinks.sort((a,b) => b.clickNum - a.clickNum);\n  }\n\n  resetCurrentName() {\n    //resets this.state.currentName from url if empty (i.e. landing page reload)\n    //used in Landing component\n    let decoded = decodeURI(window.location.href);\n    let splitUrl = decoded.split(\"/\");\n    let currName = splitUrl[splitUrl.length - 1];\n    this.setState({\n      currentName: currName\n    });\n  }\n\n  onSubmit(event) {\n    //Add new link - update db - sync referralLinks\n    event.preventDefault();\n    //if name is not an empty string\n    if (this.state.term) {\n      //check if name is already taken\n      let isUnique = true;\n      this.state.referralLinks.forEach((link) => {\n        if (link.name === this.state.term) {\n          isUnique = false;\n        }\n      });\n      //if name is unique\n      if (isUnique) {\n        //post new link to database - default clickNum: 0\n        let linkName = {name: this.state.term};\n        fetch(\"https://ambserver.herokuapp.com/reflinks\", {\n          method: 'POST',\n          body: JSON.stringify(linkName),\n          headers: {'Content-type': 'application/json'}\n        })\n        .then(data => {\n          console.log('Request success: ', data);\n          return fetch(\"https://ambserver.herokuapp.com/reflinks\");\n        })\n        .then(response => response.json())\n        .then(data => {\n          const list = [];\n          data.forEach((d) => {\n            list.push({name: d.name, clickNum: d.clickNum, id: d._id});\n          });\n          console.log(list);\n          this.setState({\n            referralLinks: this.sortByClicks(list)\n          });\n        })\n        .catch(error => {\n          console.log('Request failure: ', error);\n        });\n      }\n    }\n    //clear add link input term\n    this.setState({\n      term: \"\"\n    });\n  }\n\n  handleChange(event) {\n    //handle change for add link input\n    console.log(event.target);\n    console.log(event.target.value);\n   this.setState({term: event.target.value});\n  }\n\n  handleChangeLink(event) {\n    //handle change for edit link-name input\n    console.log(event.target);\n    console.log(event.target.value);\n    this.setState({nameTerm: event.target.value});\n  }\n\n  handleChangeClick(event) {\n    //handle change for edit link-clickNum input\n    console.log(event.target);\n    console.log(event.target.value);\n    this.setState({clickTerm: event.target.value});\n  }\n\n  handleLinkClick(name, clickNum) {\n    //increment clickNum and pass currentName value for landing page\n    this.setState({\n      currentName: name,\n    });\n    //increment clickNum and sync w/ db\n    let newClickNum = clickNum +=1;\n    let newBody = {\n      name: name,\n      clickNum: newClickNum\n    };\n    let nameUri = encodeURI(name);\n    fetch(\"https://ambserver.herokuapp.com/reflinks/\" + nameUri, {\n      method: 'PATCH',\n      body: JSON.stringify(newBody),\n      headers: {'Content-type': 'application/json'}\n    })\n    .then(data => {\n      console.log('Request success: ', data);\n      return fetch(\"https://ambserver.herokuapp.com/reflinks\");\n    })\n    .then(response => response.json())\n    .then(data => {\n      const list = [];\n      data.forEach((d) => {\n        list.push({name: d.name, clickNum: d.clickNum, id: d._id});\n      });\n      console.log(list);\n      this.setState({\n        referralLinks: this.sortByClicks(list)\n      });\n    })\n    .catch(error => {\n      console.log('Request failure: ', error);\n    });\n  }\n\n  editListItem(name, clickNum) {\n    //turns \"on\" edit input fields or turns off/saves edits\n    //turn on edit fields\n    if (!this.state.editName) {\n      this.setState({\n        editName: name,\n        nameTerm: name,\n        clickTerm: clickNum,\n      });\n    //if edit is active and click is on active field\n    } else if (name === this.state.editName) {\n      //set new information\n      let newName = this.state.nameTerm;\n      let newClickNum;\n      if (Number(this.state.clickTerm)) { newClickNum = this.state.clickTerm; }\n      let newBody = { name: newName, clickNum: newClickNum };\n      //update database and repopulate data\n      let nameUri = encodeURI(name);\n      fetch(\"https://ambserver.herokuapp.com/reflinks/\" + nameUri, {\n        method: 'PATCH',\n        body: JSON.stringify(newBody),\n        headers: {'Content-type': 'application/json'}\n      })\n      .then(data => {\n        console.log('Request success: ', data);\n        return fetch(\"https://ambserver.herokuapp.com/reflinks\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const list = [];\n        data.forEach((d) => {\n          list.push({name: d.name, clickNum: d.clickNum, id: d._id});\n        });\n        console.log(list);\n        this.setState({\n          referralLinks: this.sortByClicks(list),\n          edit: false,\n          editName: \"\",\n        });\n      })\n      .catch(error => {\n        console.log('Request failure: ', error);\n      });\n    }\n  }\n\n  deleteLink(name) {\n    //deletes link\n    let nameUri = encodeURI(name);\n    console.log(nameUri);\n    fetch(\"https://ambserver.herokuapp.com/reflinks/\" + nameUri, {\n      method: 'delete',\n      headers: {'Content-type': 'application/json'}\n    })\n    .then(data => {\n      console.log('Request success: ', data);\n      return fetch(\"https://ambserver.herokuapp.com/reflinks\");\n    })\n    .then(response => response.json())\n    .then(data => {\n      const list = [];\n      data.forEach((d) => {\n        list.push({name: d.name, clickNum: d.clickNum, id: d._id});\n      });\n      console.log(list);\n      this.setState({\n        referralLinks: this.sortByClicks(list)\n      });\n    })\n    .catch(error => {\n      console.log('Request failure: ', error);\n    });\n  }\n\n  render() {\n    //Site routes\n    return (\n      <Router>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home\n                onSubmit={this.onSubmit}\n                term={this.state.term}\n                handleChange={this.handleChange}\n                referralLinks={this.state.referralLinks}\n                handleLinkClick={this.handleLinkClick}\n                editListItem={this.editListItem}\n                deleteLink={this.deleteLink}\n                editName={this.state.editName}\n                handleChangeLink={this.handleChangeLink}\n                nameTerm={this.state.nameTerm}\n                handleChangeClick={this.handleChangeClick}\n                clickTerm={this.state.clickTerm}\n              />\n              </Route>\n              <Route path={\"/\" + this.state.currentName}>\n                <Landing currentName={this.state.currentName} resetCurrentName={this.resetCurrentName} />\n              </Route>\n            </Switch>\n        </Router>\n      );\n    }\n  }\n\nfunction Home(props) {\n  //Home page\n  return (\n    <div>\n      <h1 className=\"title\">Grow the web with referrals!</h1>\n      <AddNew onSubmit={props.onSubmit} term={props.term} handleChange={props.handleChange} />\n      <List\n        referralLinks={props.referralLinks}\n        handleLinkClick={props.handleLinkClick}\n        editListItem={props.editListItem}\n        deleteLink={props.deleteLink}\n        editName={props.editName}\n        handleChangeLink={props.handleChangeLink}\n        nameTerm={props.nameTerm}\n        handleChangeClick={props.handleChangeClick}\n        clickTerm={props.clickTerm}\n      />\n    </div>\n  );\n}\n\nfunction AddNew(props) {\n  //Home > AddNew\n  return (\n    <form onSubmit={props.onSubmit}>\n      <input className=\"input-text\" value={props.term} onChange={props.handleChange} placeholder=\"Add a new link\" />\n      <button className=\"add-btn\"></button>\n    </form>\n  );\n}\n\nfunction List(props) {\n  //Home > List\n  return (\n      <div className=\"table-wrapper\">\n        <table>\n          <thead>\n            <tr>\n              <th>Link</th>\n              <th>Clicks</th>\n              <th>Edit</th>\n              <th>Delete</th>\n            </tr>\n          </thead>\n          <TableLinks\n            referralLinks={props.referralLinks}\n            handleLinkClick={props.handleLinkClick}\n            editListItem={props.editListItem}\n            deleteLink={props.deleteLink}\n            editName={props.editName}\n            handleChangeLink={props.handleChangeLink}\n            nameTerm={props.nameTerm}\n            handleChangeClick={props.handleChangeClick}\n            clickTerm={props.clickTerm}\n          />\n        </table>\n      </div>\n  );\n}\n\nfunction TableLinks(props) {\n  //Home > List > TableLinks\n  //diplays referralLinks\n  return (\n    <tbody>\n      <tr className=\"spacer\">\n      </tr>\n      {props.referralLinks.map((link) => (\n        <tr key={link.id}>\n          <td className=\"link-col\">\n            {props.editName === link.name ? (\n              <input type=\"text\" value={props.nameTerm} onChange={props.handleChangeLink} />\n            ) : (\n              <Link className=\"link\" to={\"/\" + link.name} onClick={() => props.handleLinkClick(link.name, link.clickNum)}>{link.name}</Link>\n            )}\n          </td>\n          <td className=\"col\">\n            {props.editName === link.name ? (\n              <input type=\"text\" value={props.clickTerm} onChange={props.handleChangeClick} />\n            ) : (\n              link.clickNum\n            )}\n          </td>\n          <td>\n            <div className=\"switch\" onClick={() => props.editListItem(link.name, link.clickNum)}>\n              <div className={`outer-slider ${(props.editName === link.name) ? \" outer-active\" : \"\"}`}>\n                <div className={`inner-slider ${(props.editName === link.name) ? \" inner-active\" : \"\"}`}>\n                </div>\n              </div>\n            </div>\n          </td>\n          <td className=\"col delete\" onClick={() => props.deleteLink(link.name)}>\n            <span className=\"delete\">Delete</span>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nfunction Landing(props) {\n  //Landing page\n  if (!props.currentName) {\n    //Resets currentName from url if currentName is blank (i.e. page reloads)\n    props.resetCurrentName();\n  }\n  return (\n    <div>\n      <h1>{props.currentName} is the best!</h1>\n      <h2 className=\"sub-title\">Join your fellow web-heads on the World Wide Web!</h2>\n      {/* wwwSpiderMan image by Johnathon Hutt */}\n      <img className=\"spdImg\" src=\"./wwwSpiderMan.png\" alt=\"spiderman hanging from world wide web\" />\n      <LandingLinks />\n    </div>\n  );\n}\n\nfunction LandingLinks(props) {\n  //Landing page > LandingLinks\n  return (\n    <div className=\"row\">\n      <div className=\"card\">\n        <h3 className=\"card-title\">About the Web</h3>\n        <ul>\n          <li>\n            <a className=\"link\" href=\"https://webfoundation.org/about/vision/history-of-the-web/\">Histroy of the Web</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://webfoundation.org/about/sir-tim-berners-lee/\">Sir Tim Berners-Lee (founder)</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://www.w3.org/\">World Wide Web Consortium</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://en.wikipedia.org/wiki/World_Wide_Web\">World Wide Web - Wikipedia</a>\n          </li>\n        </ul>\n      </div>\n      <div className=\"card\">\n        <h3 className=\"card-title\">Learn On the Web</h3>\n        <ul>\n          <li>\n            <a className=\"link\" href=\"https://www.wikipedia.org/\">Wikipedia: The Free Encycolopedia</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://www.edx.org/\">edX: Free and Affordable Education</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://www.udemy.com/\">Udemy: Affordable Online Education</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://developer.mozilla.org/en-US/\">MDN: Learn About Web Technologies</a>\n          </li>\n        </ul>\n      </div>\n      <div className=\"card\">\n        <h3 className=\"card-title\">Fun On the Web</h3>\n        <ul>\n          <li>\n            <a className=\"link\" href=\"https://www.youtube.com/\">YouTube: Watch and Share Videos</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://www.reddit.com/\">Reddit: The Front Page of The Internet</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://medium.com/\">Medium: Online Publishing</a>\n          </li>\n          <li>\n            <a className=\"link\" href=\"https://twitter.com\">Twitter: Short Form Conversations With the World</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}